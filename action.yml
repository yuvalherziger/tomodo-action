name: "tomodo MongoDB"
description: "Start MongoDB instances in a GitHub action"
inputs:
  name:
    description: "The deployment's name"
    required: false
    default: "tomodo-action"
  port:
    description: "MongoDB port (in a cluster, this is the first incrementing port)"
    required: false
    default: "27017"
  image-repo:
    description: "The MongoDB image name/repo (you probably don't want to change it)"
    required: false
    default: mongo
  image-tag:
    description: "The MongoDB image tag, which determines the MongoDB version to install"
    required: false
    default: latest
  instance-type:
    description: "The MongoDB instance type (standalone/replica-set/sharded/atlas)"
    required: false
    default: standalone
  replicas:
    description: "The number of replica set nodes to provision"
    required: false
    default: "3"
  shards:
    description: "The number of shards to provision in a sharded cluster"
    required: false
    default: "2"
  config-severs:
    description: "The number of config server replica set nodes"
    required: false
    default: "1"
  mongos:
    description: "The number of mongos routers"
    required: false
    default: "1"
  username:
    description: "Optional authentication username"
    required: false
    default: ""
  password:
    description: "Optional authentication password"
    required: false
    default: ""
  network-name:
    description: |
      The Docker network to provision the deployment in; will create a new one or use an existing one 
      with the same name if such network exists
    required: false
    default: mongo-network
outputs:
  connection-string:
    description: "MongoDB connection string from Tomodo"
    value: ${{ steps.connection-string.outputs.connection-string }}
runs:
  using: "composite"
  steps:
    - name: Set up Python 3.8
      uses: actions/setup-python@v5
      with:
        python-version: 3.8
    - name: Install tomodo
      shell: bash
      run: pip install tomodo
    - name: Run deployment
      shell: bash
      run: |
        tomodo provision ${{ inputs.instance-type }} \
        --name ${{ inputs.name }} \
        ${{ inputs.instance-type == 'atlas' && '' || '--ephemeral' }} \
        --port ${{ inputs.port }} \
        --image-tag ${{ inputs.image-tag }} \
        --network-name ${{ inputs.network-name }} \
        ${{ (inputs.username != '' && inputs.password != '') && format('--username {0} --password {1}', inputs.username, inputs.password) || '' }}
    - name: Map standalone/Atlas host
      if: ${{ inputs.instance-type == 'standalone' || inputs.instance-type == 'atlas' }}
      id: single-host
      shell: bash
      run: |
        echo "127.0.0.1 ${{ inputs.name }}" | sudo tee -a /etc/hosts
        export CONNECTION_STRING="mongodb://${{ (inputs.username != '' && inputs.password != '') && format('{0}:{1}@', inputs.username, inputs.password) || '' }}${{ format('{0}:{1}/?directConnection=true', inputs.name, inputs.port) }}"
        echo "connection_string=$CONNECTION_STRING" >> $GITHUB_OUTPUT
    - name: Map replica set hosts
      if: ${{ inputs.instance-type == 'replica-set' || inputs.instance-type == 'sharded' }}
      id: multi-host
      shell: bash
      run: |
        export ATTR=${{ inputs.instance-type == 'replica-set' && 'members' || 'routers' }}
        tomodo describe --name ${{ inputs.name }} --output json | jq -r ".$ATTR[] | \"\(.name)\"" | while read name; do echo "127.0.0.1 $name" | sudo tee -a /etc/hosts; done
        name=${{ inputs.name }}
        hostname=$(tomodo describe --name $name --output json | jq -r ".$ATTR | map(\"\(.name):\(.port)\") | join(\",\")")
        export CONNECTION_STRING="mongodb://${{ (inputs.username != '' && inputs.password != '') && format('{0}:{1}@', inputs.username, inputs.password) || '' }}${hostname}/"
        echo "connection_string=$CONNECTION_STRING" >> $GITHUB_OUTPUT
#    - name: Map sharded cluster mongos hosts
#      if: ${{ inputs.instance-type == 'sharded'}}
#      shell: bash
#      run: |
#        tomodo describe --name ${{ inputs.name }} --output json | jq -r '.routers[] | "\(.name)"' | while read name; do echo "127.0.0.1 $name" | sudo tee -a /etc/hosts; done
#        name=${{ inputs.name }}
#        hostname=$(tomodo describe --name $name --output json | jq -r '.routers | map("\(.name):\(.port)") | join(",")')
#        export CONNECTION_STRING="mongodb://${{ (inputs.username != '' && inputs.password != '') && format('{0}:{1}@', inputs.username, inputs.password) || '' }}${hostname}/"
#        echo "connection_string=$CONNECTION_STRING" >> $GITHUB_OUTPUT
    - name: Write Connection String
      id: connection-string
      shell: bash
      run: echo "connection-string=${{ steps.single-host.outputs.connection_string != "" && steps.multi-host.outputs.connection_string || steps.single-host.outputs.connection_string}}" >> $GITHUB_OUTPUT
